<!DOCTYPE html>
<html data-wf-domain="paolos-fabulous-project-e74cab96af4b9fc.webflow.io" data-wf-page="5cfd93a271000a535c533f97" data-wf-site="5cfd93a271000a4eb8533f96" data-wf-status="1" class="w-mod-js w-mod-ix wf-lato-n1-active wf-lato-i1-active wf-lato-n3-active wf-lato-i3-active wf-lato-n4-active wf-lato-i4-active wf-lato-n7-active wf-lato-i7-active wf-lato-n9-active wf-lato-i9-active wf-ptserif-n4-active wf-ptserif-i4-active wf-ptserif-n7-active wf-ptserif-i7-active wf-inconsolata-n4-active wf-inconsolata-n7-active wf-oswald-n2-active wf-oswald-n3-active wf-oswald-n4-active wf-oswald-n5-active wf-oswald-n6-active wf-oswald-n7-active wf-robotomono-n4-active wf-roboto-n4-active wf-active">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Project Page | Paolo Arguelles</title>
    <meta content="width=device-width, initial-scale=1" name="viewport">
    <meta content="Webflow" name="generator">
    <link href="./website/style.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="./website/fonts.css" media="all">

    <style>
       /* Style the header with a grey background and some padding */
    .header {
      overflow: hidden;
      background-color: #f1f1f1;
      padding: 20px 50px;
    }

    /* Style the header links */
    .header a {
      float: left;
      color: black;
      text-align: center;
      padding: 12px;
      text-decoration: none;
      line-height: 25px;
      border-radius: 4px;
      transition: color 200ms;
    }

    .header a:hover {
      color: #DE5021;
    }

    /* Float the link section to the right */
    .header-right {
      float: right;
      font-size: 12px;
    }

    .myHeader {
      float: left;
      font-family: 'Palatino Linotype', 'Book Antiqua', Palatino, serif;
      font-size: 30px;
      color: #000;
    }

    .myPages {
      float: left;
      font-family: 'Futura';
      color: #000;
      font-size: 20px;
    }

    .project_image {
    	height: 600px;
    	margin-top: 0px;
    	padding-top: 0px;
    	background-image: url("./website/resources/pics/ssds_bg.jpg");
    	background-position: 50% 40%;
    	background-size: cover;
    	background-attachment: fixed;
    	line-height: 30px;
    }

    .collapsible {
      background-color: #fff;
      color: black;
      font-family: 'Futura';
      cursor: pointer;
      padding: 18px;
      width: 100%;
      border: none;
      text-align: left;
      outline: none;
      font-size: 18px;
      border-bottom-style: solid;
      border-bottom-color: inherit;
    }

    .active, .collapsible:hover {
      color: #DE5021;
    }

    .collapsible:after {
      content: '+';
      font-weight: bold;
      float: right;
      margin-left: 5px;
      color: inherit;
    }

    .active:after {
      content: "âˆ’";
      color: #DE5021;

    }

    .content {
      padding: 0 18px;
      max-height: 0;
      overflow: hidden;
      transition: max-height 500ms;
      background-color: #f1f1f1;

    /* Add media queries for responsiveness - when the screen is 500px wide or less, stack the links on top of each other */
    @media screen and (max-width: 500px) {
      .header a {
        float: none;
        display: block;
        text-align: left;
      }
      .header-right {
        float: none;
      }
    }
    </style>
</head>

<body class="body-2">
  <div class="header">
  <a href="./index.htm" class="myHeader">Paolo Arguelles</a>
  <div class="header-right">
    <a class=myPages href="./projects.htm">PROJECTS</a>
    <a class=myPages href="./bio.htm">BIOGRAPHY</a>
    <a class=myPages href="#about">SPEECH</a>
    <a class=myPages href="./website/resources/PaoloArguelles_Resume.pdf">RESUME</a>
  </div>
  </div>
    <div class="project_image">
    </div>
    <div class="project_box">
      <div class="project_contain">
        <div class="project_topic"> SPACE AND DEFENSE </div>
        <div class="project_title">
        Spacecraft Flight Simulator and Attitude Testbed
        </div>
        <div class="project_description">
          Built for Cornell's Space Systems Design Studio, this project consists of a remotely controlled testbed containing six onboard thrusters and three reaction wheels to simulate multi-axis orbital dynamics of spacecraft in a frictionless environment.        </div>
        <div class="project_body">
          <h1 class="project_body_header">
            Open-Loop (Automatic) Control
          </h1>
        constructed entirely of commercial-off-the-shelf components, save for the spherical air bearings, reaction wheels, and valves.

        A Simulink-based graphical user interface controlled the testbed.


        Original designs called for the

        became clear to me that the Arduino.

        While previous iterations called for an Arduino Due

        the Raspberry Pi

        controlled via secure shell (SSH) or virtual network computing (VNC) from any computer logged on to the Cornell University network.

        After the execution of each command, the receive serial buffer is flushed to prevent congestion and ensure that the most recent command sent by the controller is executed.


        Each COM device had to be configured in the Raspbian kernel to always be identified with a constant name. Randomly assigned names (e.g., /dev/tty0) would be automatically generated by the Raspberry Pi depending on which Arduino was recognized first.

        Each motor driver has an onboard microcontroller to configure

        <button class="collapsible">SIMULINK CONTROL INTERFACE</button>
        <div class="content">
          <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
        </div>
        <button class="collapsible">FLIGHT COMPUTER</button>
        <div class="content">
          <p>The FLIGHT COMPUTER retains the following roles:
            <ul>
                <li>Receives and interprets commands sent wirelessly to the testbed by an operator</li>
                <li>Sends instructions to the REACTION WHEEL CONTROLLER and THRUSTER CONTROLLER to execute operator commands </li>
                <li>Receives realtime telemetry from the inertial measurement unit (IMU) and pressure sensor</li>
                <li>Detects pulse information from three optical tachometers and calculates corresponding reaction wheel speed readings</li>
                <li>Transmits inertial telemetry, reaction wheel speeds, and pressure readings back to the operator
            </ul>

            Previous teams' designs called for an Arduino Due to act as the flight computer. However, after compiling a requirement set for the flight computer, I realized that an Arduino Due is not sufficient to realize the requirement set
            and instead opted for a Raspberry Pi 3B+. This switch enabled me to take advantage of a number of new capabilities including multithreading (enabling multiple processes to run concurrently, a desired trait for realtime hardware applications), increased clock speed for faster code execution, and the benefit of an entire Linux-based embedded operating system fully contained on the testbed.




          </p>
        </div>
        <button class="collapsible">CONTROLLING THE THRUSTERS</button>
        <div class="content">
          <p>The six solenoid valves controlling each of the six thrust outlets are each connected to a logic-level MOSFET which can be controlled by an Arduino microcontroller.
          There is code on the microcontroller to limit each thrust duration to 200 ms. </p>
        </div>
        <button class="collapsible">DRIVING THE REACTION WHEELS</button>
        <div class="content">
          <p>The testbed contains three high-torque DC pancake motors that act as reaction wheels. The reaction wheels were affixed orthogonally to each other to effect torques around three axes.
          An optical tachometer was carefully aimed at the spindle of each motor (which held a piece of reflective tape) to count revolutions. The optical tachometers were connected electrically to the flight computer's GPIO, where a pulse resulting from one revolution would trigger an interrupt service routine that updates an RPM value and sends it to the operator.
          Additionally, each reaction wheel was driven by a motor driver that actively monitors temperature, voltage, and current and cuts power to the load when a prespecified shutoff event is detected. Constraints were also placed on the brake ability of the reaction wheels (i.e., limits for acceleration/deceleration were put in place) to prevent large, sudden current draws.
          The reaction wheel direction and speed are both controlled by an 8-bit integer. A value of '128' sent by the operator to a reaction wheel on the testbed corresponds to zero rotation, '255' to full-speed (6000 RPM) clockwise, and '0' to full-speed counter-clockwise.
        </p>
        </div>
        <h1 class="project_body_header">
          Closed-Loop (Autonomous) Control
        </h1>
        The

        Students from a graduate spaceflight course at the Sibley School of Mechanical and Aerospace Engineering were tasked with creating a closed-loop attitude control algorithm in simulation and deploying the controller to our hardware testbed for verification.
        

        <script>
        var coll = document.getElementsByClassName("collapsible");
        var i;

        for (i = 0; i < coll.length; i++) {
          coll[i].addEventListener("click", function() {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.maxHeight){
              content.style.maxHeight = null;
            } else {
              content.style.maxHeight = content.scrollHeight + "px";
            }
          });
        }
        </script>

        </div>
      </div>

      </div>
  </div>

    <div class="section-8">
        <div class="text-block-6">Â© 2019 - 2023 by Paolo Arguelles.
            <br>All rights reserved.</div>
    </div>
    <script src="./website/projects_files/jquery-3.3.1.min.js" type="text/javascript" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
    <script src="./website/projects_files/webflow.147763e2a.js" type="text/javascript"></script>
    <!--[if lte IE 9]><script src="//cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif]-->

</body>

</html>
